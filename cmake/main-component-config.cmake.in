# parent package with with targets in components
# components are expected to contain the actual target
# each component's config should be in a equally named subdirectory, i.e.: ${CMAKE_INSTALL_DATAROOTDIR}/cmake/@PROJECT_NAME@/${component}/${component}-config.cmake


file(GLOB @PROJECT_NAME@_available_components LIST_DIRECTORIES true ${CMAKE_CURRENT_LIST_DIR}/*)

# available components are listed here
set(@PROJECT_NAME@_available_components endpoint node-store rdf-tensor sparql2tensor tentris triple-store)

# check if the user provided components are actually available
foreach(component ${@PROJECT_NAME@_FIND_COMPONENTS})
    if(NOT component IN_LIST @PROJECT_NAME@_available_components)
        message(FATAL_ERROR "Component ${component} does not exist in package @PROJECT_NAME@. Available components are ${@PROJECT_NAME@_available_components}")
    endif()
endforeach()

# default component @PROJECT_NAME@::@PROJECT_NAME@ is always included
include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@/@PROJECT_NAME@-config.cmake)

# add transitive dependencies among components
set(transitive_components "")
foreach(component ${@PROJECT_NAME@_FIND_COMPONENTS})
    if(${component} STREQUAL "tentris")
        list(APPEND transtive_components ${@PROJECT_NAME@_available_components})
    elseif(${component} STREQUAL "endpoint")
        list(APPEND transtive_components node-store rdf-tensor sparql2tensor triple-store)
    elseif(${component} STREQUAL "triple-store")
        list(APPEND transtive_components node-store rdf-tensor sparql2tensor triple-store)
    elseif(${component} STREQUAL "node-store" OR ${component} STREQUAL "sparql2tensor")
        list(APPEND transtive_components rdf-tensor)
    endif()
endforeach()
list(APPEND @PROJECT_NAME@_FIND_COMPONENTS ${transitive_components})
list(REMOVE_DUPLICATES @PROJECT_NAME@_FIND_COMPONENTS)

# include all listed components
foreach(component ${@PROJECT_NAME@_FIND_COMPONENTS})
    include(${CMAKE_CURRENT_LIST_DIR}/${component}/${component}-config.cmake)
endforeach()
