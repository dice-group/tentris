# parent package with with targets in components
# components are expected to contain the actual target
# each component's config should be in a equally named subdirectory, i.e.: ${CMAKE_INSTALL_DATAROOTDIR}/cmake/@PROJECT_NAME@/${component}/${component}-config.cmake


file(GLOB query_available_components LIST_DIRECTORIES true ${CMAKE_CURRENT_LIST_DIR}/*)
list(FILTER query_available_components EXCLUDE REGEX ".*\\..*")
# todo: test with fetch_content
message("actual: ${query_available_components}")

# available components are listed here
set(@PROJECT_NAME@_available_components query sparql node-wrapper)
message("expected: ${@PROJECT_NAME@_available_components}")

# check if the user provided components are actually available
foreach(component ${@PROJECT_NAME@_FIND_COMPONENTS})
    if(NOT component IN_LIST @PROJECT_NAME@_available_components)
        message(FATAL_ERROR "Component ${component} does not exist in package @PROJECT_NAME@. Available components are ${@PROJECT_NAME@_available_components}")
    endif()
endforeach()

# set(@PROJECT_NAME@_default_component @PROJECT_NAME@)
set(@PROJECT_NAME@_default_component endpoint)

# default component @PROJECT_NAME@::${@PROJECT_NAME@_default_component} is always included
include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@/${@PROJECT_NAME@_default_component}-config.cmake)

# include all listed components
foreach(component ${@PROJECT_NAME@_FIND_COMPONENTS})
    include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@/${component}-config.cmake)
endforeach()